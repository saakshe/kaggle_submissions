# -*- coding: utf-8 -*-
"""nlp_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_7O8no__toIhZCfBWqFpXaUhjZufaELM
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

dataset.head()

dataset.info()

dataset.shape

dataset.isnull().sum()

# X = dataset.iloc[:, 1:-1].values
# y = dataset.iloc[:, -1].values
X_test = dataset.iloc[:, :-1].values

#1. Function to impute null value with new category
def impute_nan_create_category(DataFrame,ColName):
     dataset[ColName] = np.where(dataset[ColName].isnull(),"Unknown",dataset[ColName])
## Call function to create new category for variables
for Columns in ['location','keyword']:
    impute_nan_create_category(dataset,Columns)
#2. Display result
dataset[['location','keyword']].head(10)

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
for i in range(0, 7613):
  text = re.sub('[^a-zA-Z]', ' ', dataset['text'][i])
  text = text.lower()
  text = text.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  text = [ps.stem(word) for word in text if not word in set(all_stopwords)]
  text = ' '.join(text)
  corpus.append(text)

print(corpus)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()
y = dataset.iloc[:, -1].values
X_test = cv.fit_transform(corpus).toarray()

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X, y)

y_pred = classifier.predict(X_test)

print(y_pred)

# from google.colab import files
# df = pd.DataFrame(data = y_pred)
# df.to_csv('nlp.csv', encoding = 'utf-8-sig') 
# files.download('nlp.csv')

# submit_df = pd.read_csv("/kaggle/input/nlp-getting-started/sample_submission.csv")

# if (len(submit_df) != 3263) or (list(submit_df.columns) != ['id', 'target']):
#     raise Exception(f'The sudmit_df with {len(submit_df)} rows and {submit_df.columns} columns is not correct')
# else:
#     submit_df.to_csv('submission.csv', index=False)
#     print('Submition created successfully!!')